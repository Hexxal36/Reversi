@inject IBoardService _boardService
@inject IGameService _gameService
@inject IGameManagerService _gameManagerService
@inject AuthenticationStateProvider _authStateProvider

@if (game is null)
{
    <div>The game is loading</div>
}
else
{
    <div class="game-container">
        <div class="message">@ColorMessage</div>
        <div class="message">@AlertMessage</div>
        <div class="message">@TurnMessage</div>
        <div class="game">
            @for (int i = 0; i < 8; i++)
            {
                <div class="game-row">
                    @for (int j = 0; j < 8; j++)
                    {
                        int x = i;
                        int y = j;

                        <div class="game-cell" @onclick="() => OnTryMove(x, y)">
                            <div class="game-cell-@_boardService.GetCssClassName(gameBoard[i, j]) @(legalMoves.Contains(x * 10 + y) ? "game-cell-legal" : "")">
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
}



@code {
    [Parameter]
    public string Id { get; set; }

    public string ColorMessage = "";

    public string TurnMessage = "";

    public string AlertMessage = "";

    private Game game;

    private char[,] gameBoard = new char[8, 8];

    private List<int> legalMoves = new();

    private static event EventHandler<MoveEventArgs> OnMoveMade;

    private string userId = "";

    protected override void OnInitialized()
    {
        game = _gameManagerService.GetGame(Id);

        gameBoard = _boardService.FromBoardStringToArray(game.BoardString);

        legalMoves = _gameService.GetAllLegalMoves(gameBoard, game.OnTurn);

        var authState = _authStateProvider.GetAuthenticationStateAsync().GetAwaiter().GetResult();

        userId = authState.User.Identity.Name;

        if (game.PlayerTwo == GlobalConstants.DefaultPlayerTwo && game.PlayerOne != userId)
        {
            _gameManagerService.JoinGame(game.Id.ToString(), userId);
        }

        var playerStatus = _gameService.GetPlayerStatus(game, userId);

        ColorMessage = $"You are {playerStatus}!";

        TurnMessage = game.OnTurn switch
        {
            GlobalConstants.BlackPiece => "Black's turn",
            GlobalConstants.WhitePiece => "White's turn",
            _ => "???"
        };

        OnMoveMade += (o, e) =>
        {
            this.InvokeAsync(async () =>
            {
                if (e.Id == Id)
                {
                    await OnMove(e.xIndex, e.yIndex);
                    this.StateHasChanged();
                }
            });
        };

        base.OnInitialized();
    }

    public void OnTryMove(int x, int y)
    {
        if (game.PlayerOne == userId || game.PlayerTwo == userId)
        {
            if (_gameService.IsOnHisTurn(game, userId))
            {
                OnMoveMade.Invoke(null, new MoveEventArgs(x, y, Id));
            }
        }
    }

    public async Task OnMove(int xIndex, int yIndex)
    {
        _gameService.OnMove(ref game, ref gameBoard, ref legalMoves, ref AlertMessage, xIndex, yIndex);

        TurnMessage = TurnMessage switch
        {
            "Black's turn" => "White's turn",
            "White's turn" => "Black's turn",
            _ => "???"
        };
        await _gameManagerService.SaveGame();
    }
}