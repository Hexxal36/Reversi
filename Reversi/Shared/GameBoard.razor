@inject IBoardService _boardService
@inject IGameService _gameService
@inject IGameManagerService _gameManagerService

@if (game is null)
{
    <div>The game is loading</div>
}
else
{

    <div class="game-container">
        <div class="message">@Message</div>
        <div class="game">
            @for (int i = 0; i < 8; i++)
            {
                <div class="game-row">
                    @for (int j = 0; j < 8; j++)
                    {
                        int x = i;
                        int y = j;

                        <div class="game-cell" @onclick="() => OnMoveMade.Invoke(null, new MoveEventArgs(x, y, Id))">
                            <div class="game-cell-@_boardService.GetCssClassName(gameBoard[i, j]) @(legalMoves.Contains(x * 10 + y) ? "game-cell-legal" : "")">
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
}



@code {
    [Parameter]
    public string Id { get; set; }

    public string Message = "";

    private Game game;

    private char[,] gameBoard = new char[8, 8];

    private List<int> legalMoves = new();

    private static event EventHandler<MoveEventArgs> OnMoveMade;

    protected override void OnInitialized()
    {
        game = _gameManagerService.GetGame(Id);

        gameBoard = _boardService.FromBoardStringToArray(game.BoardString);

        legalMoves = _gameService.GetAllLegalMoves(gameBoard, game.OnTurn);

        OnMoveMade += (o, e) =>
        {
            this.InvokeAsync(async () =>
            {
                if (e.Id == Id)
                {
                    await OnMove(e.xIndex, e.yIndex);
                    this.StateHasChanged();
                }
            });
        };

        base.OnInitialized();
    }

    public async Task OnMove(int xIndex, int yIndex)
    {
        _gameService.OnMove(ref game, ref gameBoard, ref legalMoves, ref Message, xIndex, yIndex);
        await _gameManagerService.SaveGame();
    }
}