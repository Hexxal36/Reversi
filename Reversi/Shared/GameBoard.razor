@inject IBoardService _boardService
@inject IGameService _gameService
@inject IGameManagerService _gameManagerService
@inject AuthenticationStateProvider _authStateProvider

@if (game is null)
{
    <div>The game is loading</div>
}
else
{
    <div class="game-container">
        <div class="player-container">
            <div class="white-player">
                <div class="game-cell">
                    <div class="game-cell-white">
                        @if (game.OnTurn == GlobalConstants.WhitePiece)
                        {
                            <div class="turn"></div>
                        }
                    </div>
                </div>
                <p>
                    @if (game.IsPlayerOneBlack)
                    {
                        @game.PlayerTwo
                    }
                    else
                    {
                        @game.PlayerOne
                    }
                </p>
            </div>
            <div class="black-player">
                <div class="game-cell">
                    <div class="game-cell-black">
                        @if (game.OnTurn == GlobalConstants.BlackPiece)
                        {
                            <div class="turn"></div>
                        }
                    </div>
                </div>
                <p>
                    @if (game.IsPlayerOneBlack)
                    {
                        @game.PlayerOne
                    }
                    else
                    {
                        @game.PlayerTwo
                    }
                </p>
            </div>
        </div>
        <giv class="board-container">

            <div class="message">@AlertMessage</div>
            <div class="game">
                @for (int i = 0; i < 8; i++)
                {
                    <div class="game-row">
                        @for (int j = 0; j < 8; j++)
                        {
                            int x = i;
                            int y = j;

                            <div class="game-cell" @onclick="() => OnTryMove(x, y)">
                                <div class="game-cell-@_boardService.GetCssClassName(gameBoard[i, j])
                                 @(legalMoves.Contains(x * 10 + y) && game.OnTurn == GlobalConstants.BlackPiece ? "game-black-cell-legal" : "")
                                 @(legalMoves.Contains(x * 10 + y) && game.OnTurn == GlobalConstants.WhitePiece ? "game-white-cell-legal" : "")

                                 ">
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </giv>
    </div>
}



@code {
    [Parameter]
    public string Id { get; set; }

    public string AlertMessage = "";

    private Game game;

    private char[,] gameBoard = new char[8, 8];

    private List<int> legalMoves = new();

    private static event EventHandler<MoveEventArgs> OnMoveMade;

    private static event EventHandler<JoinEventArgs> OnGameJoined;

    private string userId = "";

    protected override void OnInitialized()
    {
        game = _gameManagerService.GetGame(Id);

        gameBoard = _boardService.FromBoardStringToArray(game.BoardString);

        legalMoves = _gameService.GetAllLegalMoves(gameBoard, game.OnTurn);

        var authState = _authStateProvider.GetAuthenticationStateAsync().GetAwaiter().GetResult();

        userId = authState.User.Identity.Name;

        OnGameJoined += (o, e) =>
        {
            this.InvokeAsync(async () =>
            {
                game.PlayerTwo = e.UserId;
                this.StateHasChanged();
            });
        };

        if (game.PlayerTwo == GlobalConstants.DefaultPlayerTwo && game.PlayerOne != userId)
        {
            _gameManagerService.JoinGame(game.Id.ToString(), userId);
            OnGameJoined.Invoke(null, new JoinEventArgs(userId));
        }

        if (!_gameService.IsOnHisTurn(game, userId))
        {
            legalMoves.Clear();
        }

        OnMoveMade += (o, e) =>
        {
            this.InvokeAsync(async () =>
            {
                if (e.Id == Id)
                {
                    await OnMove(e.xIndex, e.yIndex);
                    this.StateHasChanged();
                }
            });
        };


        base.OnInitialized();
    }

    public void OnTryMove(int x, int y)
    {
        if (game.PlayerOne == userId || game.PlayerTwo == userId)
        {
            if (_gameService.IsOnHisTurn(game, userId))
            {
                OnMoveMade.Invoke(null, new MoveEventArgs(x, y, Id));

                if (!_gameService.IsOnHisTurn(game, userId))
                {
                    legalMoves.Clear();
                }
            }
        }
    }

    public async Task OnMove(int xIndex, int yIndex)
    {
        _gameService.OnMove(ref game, ref gameBoard, ref legalMoves, ref AlertMessage, xIndex, yIndex);

        await _gameManagerService.SaveGame();
    }
}